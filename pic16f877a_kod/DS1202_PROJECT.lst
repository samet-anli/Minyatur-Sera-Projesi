CCS PCM C Compiler, Version 5.007, 61971               19-Ara-22 00:24

               Filename:   C:\Users\Samet\OneDrive\Masaüstü\SERA_DOCS\RTC - Ýkinci\kod\DS1202_PROJECT.lst

               ROM used:   1275 words (62%)
                           Largest free fragment is 773
               RAM used:   19 (8%) at main() level
                           36 (16%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B1
0003:  NOP
.................... #include <16f628a.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  50
0011:  RETLW  2E
0012:  RETLW  54
0013:  RETLW  45
0014:  RETLW  53
0015:  RETLW  49
0016:  RETLW  00
0017:  BCF    0A.0
0018:  BCF    0A.1
0019:  BCF    0A.2
001A:  ADDWF  02,F
001B:  RETLW  53
001C:  RETLW  41
001D:  RETLW  4C
001E:  RETLW  49
001F:  RETLW  00
0020:  BCF    0A.0
0021:  BCF    0A.1
0022:  BCF    0A.2
0023:  ADDWF  02,F
0024:  RETLW  43
0025:  RETLW  41
0026:  RETLW  52
0027:  RETLW  53
0028:  RETLW  41
0029:  RETLW  4D
002A:  RETLW  42
002B:  RETLW  41
002C:  RETLW  00
002D:  BCF    0A.0
002E:  BCF    0A.1
002F:  BCF    0A.2
0030:  ADDWF  02,F
0031:  RETLW  50
0032:  RETLW  45
0033:  RETLW  52
0034:  RETLW  53
0035:  RETLW  45
0036:  RETLW  4D
0037:  RETLW  42
0038:  RETLW  45
0039:  RETLW  00
003A:  BCF    0A.0
003B:  BCF    0A.1
003C:  BCF    0A.2
003D:  ADDWF  02,F
003E:  RETLW  43
003F:  RETLW  55
0040:  RETLW  4D
0041:  RETLW  41
0042:  RETLW  00
0043:  BCF    0A.0
0044:  BCF    0A.1
0045:  BCF    0A.2
0046:  ADDWF  02,F
0047:  RETLW  43
0048:  RETLW  2E
0049:  RETLW  54
004A:  RETLW  45
004B:  RETLW  53
004C:  RETLW  49
004D:  RETLW  00
004E:  BCF    0A.0
004F:  BCF    0A.1
0050:  BCF    0A.2
0051:  ADDWF  02,F
0052:  RETLW  50
0053:  RETLW  41
0054:  RETLW  5A
0055:  RETLW  41
0056:  RETLW  52
0057:  RETLW  00
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  4D
005D:  RETLW  41
005E:  RETLW  52
005F:  RETLW  55
0060:  RETLW  4C
0061:  RETLW  00
0062:  BCF    0A.0
0063:  BCF    0A.1
0064:  BCF    0A.2
0065:  ADDWF  02,F
0066:  RETLW  43
0067:  RETLW  49
0068:  RETLW  4C
0069:  RETLW  45
006A:  RETLW  4B
006B:  RETLW  00
*
0245:  MOVF   33,W
0246:  CLRF   78
0247:  SUBWF  32,W
0248:  BTFSC  03.0
0249:  GOTO   24D
024A:  MOVF   32,W
024B:  MOVWF  77
024C:  GOTO   259
024D:  CLRF   77
024E:  MOVLW  08
024F:  MOVWF  34
0250:  RLF    32,F
0251:  RLF    77,F
0252:  MOVF   33,W
0253:  SUBWF  77,W
0254:  BTFSC  03.0
0255:  MOVWF  77
0256:  RLF    78,F
0257:  DECFSZ 34,F
0258:  GOTO   250
0259:  RETURN
025A:  MOVLW  20
025B:  BTFSS  2D.4
025C:  MOVLW  30
025D:  MOVWF  2E
025E:  MOVF   2C,W
025F:  MOVWF  77
0260:  BTFSS  2C.7
0261:  GOTO   26A
0262:  COMF   77,F
0263:  INCF   77,F
0264:  MOVF   77,W
0265:  MOVWF  2C
0266:  MOVLW  2D
0267:  MOVWF  2E
0268:  BSF    2D.7
0269:  BSF    2D.0
026A:  MOVF   2C,W
026B:  MOVWF  32
026C:  MOVLW  64
026D:  MOVWF  33
026E:  CALL   245
026F:  MOVF   77,W
0270:  MOVWF  2C
0271:  MOVLW  30
0272:  ADDWF  78,W
0273:  MOVWF  2F
0274:  MOVF   2C,W
0275:  MOVWF  32
0276:  MOVLW  0A
0277:  MOVWF  33
0278:  CALL   245
0279:  MOVLW  30
027A:  ADDWF  77,W
027B:  MOVWF  31
027C:  MOVLW  30
027D:  ADDWF  78,W
027E:  MOVWF  30
027F:  MOVF   2E,W
0280:  MOVWF  77
0281:  MOVLW  30
0282:  SUBWF  2F,W
0283:  BTFSC  03.2
0284:  GOTO   289
0285:  BSF    2D.1
0286:  BTFSC  2D.7
0287:  BSF    2D.2
0288:  GOTO   29D
0289:  BTFSC  2D.2
028A:  GOTO   29D
028B:  MOVF   2E,W
028C:  MOVWF  2F
028D:  BTFSC  2D.1
028E:  GOTO   294
028F:  MOVLW  30
0290:  SUBWF  30,W
0291:  BTFSC  03.2
0292:  GOTO   297
0293:  BSF    2D.0
0294:  BTFSC  2D.7
0295:  BSF    2D.1
0296:  GOTO   29D
0297:  BTFSS  03.2
0298:  BSF    2D.0
0299:  BTFSS  03.2
029A:  GOTO   29D
029B:  MOVF   2F,W
029C:  MOVWF  30
029D:  BTFSC  2D.2
029E:  GOTO   2A4
029F:  BTFSC  2D.1
02A0:  GOTO   2A7
02A1:  BTFSC  2D.0
02A2:  GOTO   2AA
02A3:  GOTO   2AD
02A4:  MOVF   2E,W
02A5:  MOVWF  32
02A6:  CALL   221
02A7:  MOVF   2F,W
02A8:  MOVWF  32
02A9:  CALL   221
02AA:  MOVF   30,W
02AB:  MOVWF  32
02AC:  CALL   221
02AD:  MOVF   31,W
02AE:  MOVWF  32
02AF:  CALL   221
02B0:  RETURN
*
04F0:  BCF    0A.0
04F1:  BCF    0A.1
04F2:  BSF    0A.2
04F3:  ADDWF  02,F
04F4:  GOTO   3F9
04F5:  GOTO   405
04F6:  GOTO   411
04F7:  GOTO   41D
04F8:  GOTO   429
04F9:  GOTO   435
04FA:  GOTO   441
....................  
.................... #list 
....................  
....................  
.................... #fuses HS,NOWDT,NOPROTECT, NOBROWNOUT, NOLVP 
....................  
.................... #use delay (clock = 4000000) 
.................... #include "add_lcd.h"                                                 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
006C:  MOVLW  33
006D:  MOVWF  04
006E:  BCF    03.7
006F:  MOVF   00,W
0070:  BTFSC  03.2
0071:  GOTO   080
0072:  MOVLW  01
0073:  MOVWF  78
0074:  CLRF   77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  DECFSZ 78,F
0078:  GOTO   074
0079:  MOVLW  4A
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
007D:  GOTO   07E
007E:  DECFSZ 00,F
007F:  GOTO   072
0080:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_B2 
.................... //!#define LCD_ENABLE_PIN     PIN_B3 
.................... //!#define LCD_DATA4          PIN_B4 
.................... //!#define LCD_DATA5          PIN_B5 
.................... //!#define LCD_DATA6          PIN_B6 
.................... //!#define LCD_DATA7          PIN_B7  
....................  
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_C1 
.................... //!#define LCD_ENABLE_PIN     PIN_C2 
.................... //!#define LCD_DATA4          PIN_C3 
.................... //!#define LCD_DATA5          PIN_C4 
.................... //!#define LCD_DATA6          PIN_C5 
.................... //!#define LCD_DATA7          PIN_C6 
.................... //! 
....................  
.................... #define LCD_RS_PIN      PIN_B0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_B1 
.................... #define LCD_ENABLE_PIN  PIN_B2 
....................  
.................... #define LCD_DATA4       PIN_B4 
.................... #define LCD_DATA5       PIN_B5 
.................... #define LCD_DATA6       PIN_B6 
.................... #define LCD_DATA7       PIN_B7   
....................  
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
0134:  BSF    03.5
0135:  BCF    06.4
.................... output_drive(LCD_DATA5); 
0136:  BCF    06.5
.................... output_drive(LCD_DATA6); 
0137:  BCF    06.6
.................... output_drive(LCD_DATA7); 
0138:  BCF    06.7
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
0139:  BCF    06.2
.................... lcd_rs_tris(); 
013A:  BCF    06.0
.................... lcd_rw_tris(); 
013B:  BCF    06.1
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
013C:  BCF    03.5
013D:  BCF    06.0
013E:  BSF    03.5
013F:  BCF    06.0
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
0140:  BCF    03.5
0141:  BCF    06.1
0142:  BSF    03.5
0143:  BCF    06.1
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
0144:  BCF    03.5
0145:  BCF    06.2
0146:  BSF    03.5
0147:  BCF    06.2
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
0148:  MOVLW  0F
0149:  BCF    03.5
014A:  MOVWF  33
014B:  CALL   06C
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
014C:  MOVLW  01
014D:  MOVWF  2C
014E:  MOVF   2C,W
014F:  SUBLW  03
0150:  BTFSS  03.0
0151:  GOTO   15A
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
0152:  MOVLW  03
0153:  MOVWF  3A
0154:  CALL   081
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
0155:  MOVLW  05
0156:  MOVWF  33
0157:  CALL   06C
0158:  INCF   2C,F
0159:  GOTO   14E
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
015A:  MOVLW  02
015B:  MOVWF  3A
015C:  CALL   081
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
015D:  CLRF   2C
015E:  MOVF   2C,W
015F:  SUBLW  03
0160:  BTFSS  03.0
0161:  GOTO   16B
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0162:  MOVF   2C,W
0163:  CALL   004
0164:  MOVWF  2D
0165:  CLRF   37
0166:  MOVF   2D,W
0167:  MOVWF  38
0168:  CALL   0DD
0169:  INCF   2C,F
016A:  GOTO   15E
016B:  GOTO   2C8 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
00E0:  BSF    06.4
.................... output_float(LCD_DATA5); 
00E1:  BSF    06.5
.................... output_float(LCD_DATA6); 
00E2:  BSF    06.6
.................... output_float(LCD_DATA7); 
00E3:  BSF    06.7
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
00E4:  BCF    03.5
00E5:  BSF    06.1
00E6:  BSF    03.5
00E7:  BCF    06.1
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00E8:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00E9:  BCF    03.5
00EA:  BSF    06.2
00EB:  BSF    03.5
00EC:  BCF    06.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00ED:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
00EE:  BCF    03.5
00EF:  CALL   0AC
00F0:  MOVF   78,W
00F1:  MOVWF  3A
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00F2:  BCF    06.2
00F3:  BSF    03.5
00F4:  BCF    06.2
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00F5:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00F6:  BCF    03.5
00F7:  BSF    06.2
00F8:  BSF    03.5
00F9:  BCF    06.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00FA:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
00FB:  BCF    03.5
00FC:  CALL   0AC
00FD:  MOVF   78,W
00FE:  MOVWF  39
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00FF:  BCF    06.2
0100:  BSF    03.5
0101:  BCF    06.2
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
0102:  BCF    06.4
.................... output_drive(LCD_DATA5); 
0103:  BCF    06.5
.................... output_drive(LCD_DATA6); 
0104:  BCF    06.6
.................... output_drive(LCD_DATA7); 
0105:  BCF    06.7
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
0106:  BCF    03.5
0107:  SWAPF  3A,W
0108:  MOVWF  77
0109:  MOVLW  F0
010A:  ANDWF  77,F
010B:  MOVF   77,W
010C:  IORWF  39,W
010D:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
00AC:  CLRF   3B
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
00AD:  BSF    03.5
00AE:  BSF    06.4
00AF:  MOVLW  00
00B0:  BCF    03.5
00B1:  BTFSC  06.4
00B2:  MOVLW  01
00B3:  IORWF  3B,F
.................... n |= input(LCD_DATA5) << 1; 
00B4:  BSF    03.5
00B5:  BSF    06.5
00B6:  MOVLW  00
00B7:  BCF    03.5
00B8:  BTFSC  06.5
00B9:  MOVLW  01
00BA:  MOVWF  77
00BB:  BCF    03.0
00BC:  RLF    77,F
00BD:  MOVF   77,W
00BE:  IORWF  3B,F
.................... n |= input(LCD_DATA6) << 2; 
00BF:  BSF    03.5
00C0:  BSF    06.6
00C1:  MOVLW  00
00C2:  BCF    03.5
00C3:  BTFSC  06.6
00C4:  MOVLW  01
00C5:  MOVWF  77
00C6:  RLF    77,F
00C7:  RLF    77,F
00C8:  MOVLW  FC
00C9:  ANDWF  77,F
00CA:  MOVF   77,W
00CB:  IORWF  3B,F
.................... n |= input(LCD_DATA7) << 3; 
00CC:  BSF    03.5
00CD:  BSF    06.7
00CE:  MOVLW  00
00CF:  BCF    03.5
00D0:  BTFSC  06.7
00D1:  MOVLW  01
00D2:  MOVWF  77
00D3:  RLF    77,F
00D4:  RLF    77,F
00D5:  RLF    77,F
00D6:  MOVLW  F8
00D7:  ANDWF  77,F
00D8:  MOVF   77,W
00D9:  IORWF  3B,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
00DA:  MOVF   3B,W
00DB:  MOVWF  78
00DC:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
00DD:  BCF    06.0
00DE:  BSF    03.5
00DF:  BCF    06.0
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
010E:  MOVF   78,W
010F:  MOVWF  39
0110:  BTFSS  39.7
0111:  GOTO   114
0112:  BSF    03.5
0113:  GOTO   0E0
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
0114:  MOVF   37,F
0115:  BTFSS  03.2
0116:  GOTO   119
0117:  BCF    06.0
0118:  GOTO   11A
0119:  BSF    06.0
011A:  BSF    03.5
011B:  BCF    06.0
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
011C:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
011D:  BCF    03.5
011E:  BCF    06.1
011F:  BSF    03.5
0120:  BCF    06.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0121:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
0122:  BCF    03.5
0123:  BCF    06.2
0124:  BSF    03.5
0125:  BCF    06.2
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
0126:  BCF    03.5
0127:  SWAPF  38,W
0128:  MOVWF  39
0129:  MOVLW  0F
012A:  ANDWF  39,F
012B:  MOVF   39,W
012C:  MOVWF  3A
012D:  CALL   081
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
012E:  MOVF   38,W
012F:  ANDLW  0F
0130:  MOVWF  39
0131:  MOVWF  3A
0132:  CALL   081
0133:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0081:  BTFSC  3A.0
0082:  GOTO   085
0083:  BCF    06.4
0084:  GOTO   086
0085:  BSF    06.4
0086:  BSF    03.5
0087:  BCF    06.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0088:  BCF    03.5
0089:  BTFSC  3A.1
008A:  GOTO   08D
008B:  BCF    06.5
008C:  GOTO   08E
008D:  BSF    06.5
008E:  BSF    03.5
008F:  BCF    06.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
0090:  BCF    03.5
0091:  BTFSC  3A.2
0092:  GOTO   095
0093:  BCF    06.6
0094:  GOTO   096
0095:  BSF    06.6
0096:  BSF    03.5
0097:  BCF    06.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
0098:  BCF    03.5
0099:  BTFSC  3A.3
009A:  GOTO   09D
009B:  BCF    06.7
009C:  GOTO   09E
009D:  BSF    06.7
009E:  BSF    03.5
009F:  BCF    06.7
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00A0:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
00A1:  BCF    03.5
00A2:  BSF    06.2
00A3:  BSF    03.5
00A4:  BCF    06.2
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
00A5:  GOTO   0A6
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
00A6:  BCF    03.5
00A7:  BCF    06.2
00A8:  BSF    03.5
00A9:  BCF    06.2
00AA:  BCF    03.5
00AB:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
01FE:  DECFSZ 34,W
01FF:  GOTO   202
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
0200:  CLRF   35
0201:  GOTO   216
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
0202:  MOVF   34,W
0203:  SUBLW  02
0204:  BTFSS  03.2
0205:  GOTO   209
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
0206:  MOVLW  40
0207:  MOVWF  35
0208:  GOTO   216
.................... else if(y==3) 
0209:  MOVF   34,W
020A:  SUBLW  03
020B:  BTFSS  03.2
020C:  GOTO   210
....................    address=lcd_line_three;      
020D:  MOVLW  14
020E:  MOVWF  35
020F:  GOTO   216
.................... else if(y==4) 
0210:  MOVF   34,W
0211:  SUBLW  04
0212:  BTFSS  03.2
0213:  GOTO   216
....................    address=lcd_line_four;    
0214:  MOVLW  54
0215:  MOVWF  35
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
0216:  MOVLW  01
0217:  SUBWF  33,W
0218:  ADDWF  35,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0219:  MOVF   35,W
021A:  IORLW  80
021B:  MOVWF  36
021C:  CLRF   37
021D:  MOVF   36,W
021E:  MOVWF  38
021F:  CALL   0DD
0220:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
0221:  MOVF   32,W
0222:  XORLW  0C
0223:  BTFSC  03.2
0224:  GOTO   22C
0225:  XORLW  06
0226:  BTFSC  03.2
0227:  GOTO   234
0228:  XORLW  02
0229:  BTFSC  03.2
022A:  GOTO   23A
022B:  GOTO   23F
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
022C:  CLRF   37
022D:  MOVLW  01
022E:  MOVWF  38
022F:  CALL   0DD
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
0230:  MOVLW  02
0231:  MOVWF  33
0232:  CALL   06C
....................       break; 
0233:  GOTO   244
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
0234:  MOVLW  01
0235:  MOVWF  33
0236:  MOVLW  02
0237:  MOVWF  34
0238:  CALL   1FE
....................       break; 
0239:  GOTO   244
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
023A:  CLRF   37
023B:  MOVLW  10
023C:  MOVWF  38
023D:  CALL   0DD
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
023E:  GOTO   244
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
023F:  MOVLW  01
0240:  MOVWF  37
0241:  MOVF   32,W
0242:  MOVWF  38
0243:  CALL   0DD
....................       break; 
....................    } 
0244:  RETURN
.................... }       
.................... // ***************************************************    
....................  
.................... #include "DS1302.C"   
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
....................  
....................  
.................... #define RTC_RST  PIN_A0 
.................... #define RTC_SCLK PIN_A1 
.................... #define RTC_IO   PIN_A2 
....................  
.................... #endif 
....................  
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
016C:  CLRF   35
016D:  MOVF   35,W
016E:  SUBLW  07
016F:  BTFSS  03.0
0170:  GOTO   183
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0171:  BCF    03.0
0172:  RRF    34,F
0173:  BTFSC  03.0
0174:  GOTO   177
0175:  BCF    05.2
0176:  GOTO   178
0177:  BSF    05.2
0178:  BSF    03.5
0179:  BCF    05.2
....................       output_high(RTC_SCLK); 
017A:  BCF    05.1
017B:  BCF    03.5
017C:  BSF    05.1
....................       output_low(RTC_SCLK); 
017D:  BSF    03.5
017E:  BCF    05.1
017F:  BCF    03.5
0180:  BCF    05.1
0181:  INCF   35,F
0182:  GOTO   16D
....................    } 
0183:  RETURN
.................... } 
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0184:  BSF    03.5
0185:  BCF    05.0
0186:  BCF    03.5
0187:  BSF    05.0
....................    write_ds1302_byte(cmd); 
0188:  MOVF   32,W
0189:  MOVWF  34
018A:  CALL   16C
....................    write_ds1302_byte(data); 
018B:  MOVF   33,W
018C:  MOVWF  34
018D:  CALL   16C
....................    output_low(RTC_RST); 
018E:  BSF    03.5
018F:  BCF    05.0
0190:  BCF    03.5
0191:  BCF    05.0
0192:  RETURN
.................... } 
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
0193:  BSF    03.5
0194:  BCF    05.0
0195:  BCF    03.5
0196:  BSF    05.0
....................    write_ds1302_byte(cmd); 
0197:  MOVF   30,W
0198:  MOVWF  34
0199:  CALL   16C
....................  
....................    for(i=0;i<=7;++i) { 
019A:  CLRF   31
019B:  MOVF   31,W
019C:  SUBLW  07
019D:  BTFSS  03.0
019E:  GOTO   1B4
....................       shift_right(&data,1,input(RTC_IO)); 
019F:  BSF    03.5
01A0:  BSF    05.2
01A1:  BCF    03.5
01A2:  BTFSC  05.2
01A3:  GOTO   1A6
01A4:  BCF    03.0
01A5:  GOTO   1A7
01A6:  BSF    03.0
01A7:  RRF    32,F
....................       output_high(RTC_SCLK); 
01A8:  BSF    03.5
01A9:  BCF    05.1
01AA:  BCF    03.5
01AB:  BSF    05.1
....................       delay_us(2); 
01AC:  GOTO   1AD
....................       output_low(RTC_SCLK); 
01AD:  BSF    03.5
01AE:  BCF    05.1
01AF:  BCF    03.5
01B0:  BCF    05.1
....................       delay_us(2); 
01B1:  GOTO   1B2
01B2:  INCF   31,F
01B3:  GOTO   19B
....................    } 
....................    output_low(RTC_RST); 
01B4:  BSF    03.5
01B5:  BCF    05.0
01B6:  BCF    03.5
01B7:  BCF    05.0
....................    return(data); 
01B8:  MOVF   32,W
01B9:  MOVWF  78
01BA:  RETURN
.................... } 
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
01BB:  BSF    03.5
01BC:  BCF    05.0
01BD:  BCF    03.5
01BE:  BCF    05.0
....................    delay_us(2); 
01BF:  GOTO   1C0
....................    output_low(RTC_SCLK); 
01C0:  BSF    03.5
01C1:  BCF    05.1
01C2:  BCF    03.5
01C3:  BCF    05.1
....................    write_ds1302(0x8e,0); 
01C4:  MOVLW  8E
01C5:  MOVWF  32
01C6:  CLRF   33
01C7:  CALL   184
....................    write_ds1302(0x90,0xa6); 
01C8:  MOVLW  90
01C9:  MOVWF  32
01CA:  MOVLW  A6
01CB:  MOVWF  33
01CC:  CALL   184
....................    x=read_ds1302(0x81); 
01CD:  MOVLW  81
01CE:  MOVWF  30
01CF:  CALL   193
01D0:  MOVF   78,W
01D1:  MOVWF  2C
....................    if((x & 0x80)!=0) 
01D2:  MOVF   2C,W
01D3:  ANDLW  80
01D4:  BTFSC  03.2
01D5:  GOTO   1DA
....................      write_ds1302(0x80,0); 
01D6:  MOVLW  80
01D7:  MOVWF  32
01D8:  CLRF   33
01D9:  CALL   184
01DA:  GOTO   2C9 (RETURN)
.................... } 
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................    write_ds1302(0x86,day); 
01DB:  MOVLW  86
01DC:  MOVWF  32
01DD:  MOVF   2C,W
01DE:  MOVWF  33
01DF:  CALL   184
....................    write_ds1302(0x88,mth); 
01E0:  MOVLW  88
01E1:  MOVWF  32
01E2:  MOVF   2D,W
01E3:  MOVWF  33
01E4:  CALL   184
....................    write_ds1302(0x8c,year); 
01E5:  MOVLW  8C
01E6:  MOVWF  32
01E7:  MOVF   2E,W
01E8:  MOVWF  33
01E9:  CALL   184
....................    write_ds1302(0x8a,dow); 
01EA:  MOVLW  8A
01EB:  MOVWF  32
01EC:  MOVF   2F,W
01ED:  MOVWF  33
01EE:  CALL   184
....................    write_ds1302(0x84,hr); 
01EF:  MOVLW  84
01F0:  MOVWF  32
01F1:  MOVF   30,W
01F2:  MOVWF  33
01F3:  CALL   184
....................    write_ds1302(0x82,min); 
01F4:  MOVLW  82
01F5:  MOVWF  32
01F6:  MOVF   31,W
01F7:  MOVWF  33
01F8:  CALL   184
....................    write_ds1302(0x80,0); 
01F9:  MOVLW  80
01FA:  MOVWF  32
01FB:  CLRF   33
01FC:  CALL   184
01FD:  GOTO   2D6 (RETURN)
.................... } 
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = read_ds1302(0x87); 
*
02D6:  MOVLW  87
02D7:  MOVWF  30
02D8:  CALL   193
02D9:  MOVF   78,W
02DA:  MOVWF  23
*
02FB:  MOVLW  87
02FC:  MOVWF  30
02FD:  CALL   193
02FE:  MOVF   78,W
02FF:  MOVWF  23
....................    mth = read_ds1302(0x89); 
*
02DB:  MOVLW  89
02DC:  MOVWF  30
02DD:  CALL   193
02DE:  MOVF   78,W
02DF:  MOVWF  24
*
0300:  MOVLW  89
0301:  MOVWF  30
0302:  CALL   193
0303:  MOVF   78,W
0304:  MOVWF  24
....................    year = read_ds1302(0x8d); 
*
02E0:  MOVLW  8D
02E1:  MOVWF  30
02E2:  CALL   193
02E3:  MOVF   78,W
02E4:  MOVWF  25
*
0305:  MOVLW  8D
0306:  MOVWF  30
0307:  CALL   193
0308:  MOVF   78,W
0309:  MOVWF  25
....................    dow = read_ds1302(0x8b); 
*
02E5:  MOVLW  8B
02E6:  MOVWF  30
02E7:  CALL   193
02E8:  MOVF   78,W
02E9:  MOVWF  26
*
030A:  MOVLW  8B
030B:  MOVWF  30
030C:  CALL   193
030D:  MOVF   78,W
030E:  MOVWF  26
.................... } 
....................  
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = read_ds1302(0x85); 
*
02EC:  MOVLW  85
02ED:  MOVWF  30
02EE:  CALL   193
02EF:  MOVF   78,W
02F0:  MOVWF  22
....................    min = read_ds1302(0x83); 
02F1:  MOVLW  83
02F2:  MOVWF  30
02F3:  CALL   193
02F4:  MOVF   78,W
02F5:  MOVWF  21
....................    sec = read_ds1302(0x81); 
02F6:  MOVLW  81
02F7:  MOVWF  30
02F8:  CALL   193
02F9:  MOVF   78,W
02FA:  MOVWF  20
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... int saniye, dakika, saat, gun, ay, yil, haftanin_gunu; 
....................  
.................... // 0 bitki yok  
.................... // 1 gul 
.................... // 2 marul 
.................... // 3 cilek 
.................... char bitki = '0'; 
.................... int1 haber1 = 0; 
.................... int1 haber2 = 0; 
.................... int1 haber3 = 0; 
....................  
.................... // durumlar 
.................... int1 durum1 = 0; 
.................... int1 durum2 = 0; 
.................... int1 durum3 = 0; 
....................  
.................... int8 x = 0; 
.................... int8 y = 0; 
....................  
....................  
....................  
.................... int main() 
*
02B1:  MOVLW  30
02B2:  MOVWF  27
02B3:  BCF    28.0
02B4:  BCF    28.1
02B5:  BCF    28.2
02B6:  BCF    28.3
02B7:  BCF    28.4
02B8:  BCF    28.5
02B9:  CLRF   29
02BA:  CLRF   2A
02BB:  MOVLW  07
02BC:  MOVWF  1F
02BD:  BCF    03.7
02BE:  MOVLW  1F
02BF:  ANDWF  03,F
.................... {   
....................  
....................     
....................     
....................    set_tris_a(0x10); 
02C0:  MOVLW  10
02C1:  BSF    03.5
02C2:  MOVWF  05
....................    set_tris_b(0x08); 
02C3:  MOVLW  08
02C4:  MOVWF  06
....................    output_a(0); 
02C5:  BCF    03.5
02C6:  CLRF   05
....................    lcd_init(); 
02C7:  GOTO   134
....................    rtc_init(); 
02C8:  GOTO   1BB
....................     
....................    //------- pwm ---------- 
....................   // setup_psp(PSP_DISABLED);    // asenkton haberlesme 
....................   // setup_spi(SPI_SS_DISABLED); // yazdirma hizmeti arayuzu 
....................   // setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
....................   // setup_timer_1(T1_DISABLED);  
....................   // setup_timer_2(T2_DIV_BY_16,255,1); // PWM icin timer2 kullaniliyor  
....................    // maksimum 255 olarak ayarladik 
....................     
....................    //************************** 
....................    //day - mounth - year - dow - saat - minute 
....................    rtc_set_datetime(29, 11, 22, 2, 8, 9);  
02C9:  MOVLW  1D
02CA:  MOVWF  2C
02CB:  MOVLW  0B
02CC:  MOVWF  2D
02CD:  MOVLW  16
02CE:  MOVWF  2E
02CF:  MOVLW  02
02D0:  MOVWF  2F
02D1:  MOVLW  08
02D2:  MOVWF  30
02D3:  MOVLW  09
02D4:  MOVWF  31
02D5:  GOTO   1DB
....................     
....................    //----- pwm ---- 
....................    //setup_ccp1(CCP_PWM); 
....................    //setup_ccp1(CCP_PWM); 
....................    //set_pwm1_duty(k); 
....................    //delay_us(20); 
....................     
....................    // Sistemin basladigi gun 
....................    rtc_get_date(gun, ay, yil, haftanin_gunu); 
....................    int8 sistemBaslamaGunu = gun; 
*
02EA:  MOVF   23,W
02EB:  MOVWF  2B
....................     
.................... while(TRUE) 
....................    { 
....................        
....................        
....................       rtc_get_time(saat, dakika, saniye); 
....................       rtc_get_date(gun, ay, yil, haftanin_gunu); 
....................        
....................        
....................        
....................       if(saat == 8) // Sadece sabah 8 de sulama yapilir. 
*
030F:  MOVF   22,W
0310:  SUBLW  08
0311:  BTFSS  03.2
0312:  GOTO   351
....................       { 
....................          // Sulama Sistemi 
....................          if(bitki == '1')   // Gul 
0313:  MOVF   27,W
0314:  SUBLW  31
0315:  BTFSS  03.2
0316:  GOTO   350
....................          { 
....................             if(durum1 == 1 && durum2 == 1 && durum3 == 1) 
0317:  BTFSS  28.3
0318:  GOTO   329
0319:  BTFSS  28.4
031A:  GOTO   329
031B:  BTFSS  28.5
031C:  GOTO   329
....................             // Meyve Durumu 
....................             { 
....................                // 2 gunde 1 4 dakika  
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 4 ) output_high(pin_a3); 
031D:  MOVF   2B,W
031E:  ANDLW  01
031F:  BTFSS  03.2
0320:  GOTO   327
0321:  MOVF   21,W
0322:  SUBLW  03
0323:  BTFSS  03.0
0324:  GOTO   327
0325:  BSF    05.3
0326:  GOTO   328
....................                else output_low(pin_a3); 
0327:  BCF    05.3
....................             } 
0328:  GOTO   350
....................             else if(durum1 == 1 && durum2 == 1 && durum3 == 0 ) 
0329:  BTFSS  28.3
032A:  GOTO   33B
032B:  BTFSS  28.4
032C:  GOTO   33B
032D:  BTFSC  28.5
032E:  GOTO   33B
....................             //Ciceklenme Durumu 
....................             { 
....................                //  2 günde 1 4 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 4 ) output_high(pin_a3); 
032F:  MOVF   2B,W
0330:  ANDLW  01
0331:  BTFSS  03.2
0332:  GOTO   339
0333:  MOVF   21,W
0334:  SUBLW  03
0335:  BTFSS  03.0
0336:  GOTO   339
0337:  BSF    05.3
0338:  GOTO   33A
....................                else output_low(pin_a3); 
0339:  BCF    05.3
....................             } 
033A:  GOTO   350
....................             else if(durum1 == 1 && durum2 == 0 && durum3 == 0) 
033B:  BTFSS  28.3
033C:  GOTO   349
033D:  BTFSC  28.4
033E:  GOTO   349
033F:  BTFSC  28.5
0340:  GOTO   349
....................             //Cimlenme Durumu 
....................             { 
....................                // sabah 8 4 dakika - hergün 
....................                if(dakika <  4) output_high(pin_a3); 
0341:  MOVF   21,W
0342:  SUBLW  03
0343:  BTFSS  03.0
0344:  GOTO   347
0345:  BSF    05.3
0346:  GOTO   348
....................                else {   output_low(pin_a3);  } 
0347:  BCF    05.3
....................             } 
0348:  GOTO   350
....................             else 
....................             // Tohum Hali 
....................             { 
....................                // 2 dakika - hergün 
....................                if(dakika <  2) output_high(pin_a3); 
0349:  MOVF   21,W
034A:  SUBLW  01
034B:  BTFSS  03.0
034C:  GOTO   34F
034D:  BSF    05.3
034E:  GOTO   350
....................                else {   output_low(pin_a3);  } 
034F:  BCF    05.3
....................             } 
....................          }// Saat 8 olmalýnýn süslü parantezi 
....................          } 
0350:  GOTO   3D4
....................          else if(bitki == '2')  // Marul 
0351:  MOVF   27,W
0352:  SUBLW  32
0353:  BTFSS  03.2
0354:  GOTO   393
....................          { 
....................             if(durum1 == 1 && durum2 == 1 && durum3 == 1) 
0355:  BTFSS  28.3
0356:  GOTO   367
0357:  BTFSS  28.4
0358:  GOTO   367
0359:  BTFSS  28.5
035A:  GOTO   367
....................             // Meyve Durumu 
....................             { 
....................                //  2 günde 1 - 4 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 4 ) output_high(pin_a3); 
035B:  MOVF   2B,W
035C:  ANDLW  01
035D:  BTFSS  03.2
035E:  GOTO   365
035F:  MOVF   21,W
0360:  SUBLW  03
0361:  BTFSS  03.0
0362:  GOTO   365
0363:  BSF    05.3
0364:  GOTO   366
....................                else output_low(pin_a3); 
0365:  BCF    05.3
....................             } 
0366:  GOTO   392
....................             else if(durum1 == 1 && durum2 == 1 && durum3 == 0 ) 
0367:  BTFSS  28.3
0368:  GOTO   379
0369:  BTFSS  28.4
036A:  GOTO   379
036B:  BTFSC  28.5
036C:  GOTO   379
....................             //Ciceklenme Durumu 
....................             { 
....................                //  2 günde 1 - 4 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 4 ) output_high(pin_a3); 
036D:  MOVF   2B,W
036E:  ANDLW  01
036F:  BTFSS  03.2
0370:  GOTO   377
0371:  MOVF   21,W
0372:  SUBLW  03
0373:  BTFSS  03.0
0374:  GOTO   377
0375:  BSF    05.3
0376:  GOTO   378
....................                else output_low(pin_a3); 
0377:  BCF    05.3
....................             } 
0378:  GOTO   392
....................             else if(durum1 == 1 && durum2 == 0 && durum3 == 0) 
0379:  BTFSS  28.3
037A:  GOTO   38B
037B:  BTFSC  28.4
037C:  GOTO   38B
037D:  BTFSC  28.5
037E:  GOTO   38B
....................             //Cimlenme Durumu 
....................             { 
....................                //  2 günde 1 - 3 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 3 ) output_high(pin_a3); 
037F:  MOVF   2B,W
0380:  ANDLW  01
0381:  BTFSS  03.2
0382:  GOTO   389
0383:  MOVF   21,W
0384:  SUBLW  02
0385:  BTFSS  03.0
0386:  GOTO   389
0387:  BSF    05.3
0388:  GOTO   38A
....................                else output_low(pin_a3); 
0389:  BCF    05.3
....................             } 
038A:  GOTO   392
....................             else 
....................             // Tohum Hali 
....................             { 
....................                // 2 dakika - hergün 
....................                if(dakika <  2) output_high(pin_a3); 
038B:  MOVF   21,W
038C:  SUBLW  01
038D:  BTFSS  03.0
038E:  GOTO   391
038F:  BSF    05.3
0390:  GOTO   392
....................                else {   output_low(pin_a3);  } 
0391:  BCF    05.3
....................             } 
....................           
....................          } 
0392:  GOTO   3D4
....................          else if(bitki == '3')  // Çilek 
0393:  MOVF   27,W
0394:  SUBLW  33
0395:  BTFSS  03.2
0396:  GOTO   3D4
....................          { 
....................             if(durum1 == 1 && durum2 == 1 && durum3 == 1) 
0397:  BTFSS  28.3
0398:  GOTO   3A9
0399:  BTFSS  28.4
039A:  GOTO   3A9
039B:  BTFSS  28.5
039C:  GOTO   3A9
....................             // Meyve Durumu 
....................             { 
....................                 //  2 günde 1 - 3 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 3 ) output_high(pin_a3); 
039D:  MOVF   2B,W
039E:  ANDLW  01
039F:  BTFSS  03.2
03A0:  GOTO   3A7
03A1:  MOVF   21,W
03A2:  SUBLW  02
03A3:  BTFSS  03.0
03A4:  GOTO   3A7
03A5:  BSF    05.3
03A6:  GOTO   3A8
....................                else output_low(pin_a3); 
03A7:  BCF    05.3
....................             } 
03A8:  GOTO   3D4
....................             else if(durum1 == 1 && durum2 == 1 && durum3 == 0 ) 
03A9:  BTFSS  28.3
03AA:  GOTO   3BB
03AB:  BTFSS  28.4
03AC:  GOTO   3BB
03AD:  BTFSC  28.5
03AE:  GOTO   3BB
....................             //Ciceklenme Durumu 
....................             { 
....................                //  2 günde 1 - 4 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 4 ) output_high(pin_a3); 
03AF:  MOVF   2B,W
03B0:  ANDLW  01
03B1:  BTFSS  03.2
03B2:  GOTO   3B9
03B3:  MOVF   21,W
03B4:  SUBLW  03
03B5:  BTFSS  03.0
03B6:  GOTO   3B9
03B7:  BSF    05.3
03B8:  GOTO   3BA
....................                else output_low(pin_a3); 
03B9:  BCF    05.3
....................             } 
03BA:  GOTO   3D4
....................             else if(durum1 == 1 && durum2 == 0 && durum3 == 0) 
03BB:  BTFSS  28.3
03BC:  GOTO   3CD
03BD:  BTFSC  28.4
03BE:  GOTO   3CD
03BF:  BTFSC  28.5
03C0:  GOTO   3CD
....................             //Cimlenme Durumu 
....................             { 
....................                //  2 günde 1 - 3 dk 
....................                if(sistemBaslamaGunu %2 == 0 && dakika < 3 ) output_high(pin_a3); 
03C1:  MOVF   2B,W
03C2:  ANDLW  01
03C3:  BTFSS  03.2
03C4:  GOTO   3CB
03C5:  MOVF   21,W
03C6:  SUBLW  02
03C7:  BTFSS  03.0
03C8:  GOTO   3CB
03C9:  BSF    05.3
03CA:  GOTO   3CC
....................                else output_low(pin_a3); 
03CB:  BCF    05.3
....................             } 
03CC:  GOTO   3D4
....................             else 
....................             // Tohum Hali 
....................             { 
....................                // 2 dakika - hergün 
....................                if(dakika <  2) output_high(pin_a3); 
03CD:  MOVF   21,W
03CE:  SUBLW  01
03CF:  BTFSS  03.0
03D0:  GOTO   3D3
03D1:  BSF    05.3
03D2:  GOTO   3D4
....................                else {   output_low(pin_a3);  } 
03D3:  BCF    05.3
....................             } 
....................           
....................          } 
....................              
....................           
....................        
....................           
....................       printf(lcd_putc, "\f%02d:%02d:%02d  ",saat, dakika, saniye); 
03D4:  MOVLW  0C
03D5:  MOVWF  32
03D6:  CALL   221
03D7:  MOVF   22,W
03D8:  MOVWF  2C
03D9:  MOVLW  01
03DA:  MOVWF  2D
03DB:  CALL   25A
03DC:  MOVLW  3A
03DD:  MOVWF  32
03DE:  CALL   221
03DF:  MOVF   21,W
03E0:  MOVWF  2C
03E1:  MOVLW  01
03E2:  MOVWF  2D
03E3:  CALL   25A
03E4:  MOVLW  3A
03E5:  MOVWF  32
03E6:  CALL   221
03E7:  MOVF   20,W
03E8:  MOVWF  2C
03E9:  MOVLW  01
03EA:  MOVWF  2D
03EB:  CALL   25A
03EC:  MOVLW  20
03ED:  MOVWF  32
03EE:  CALL   221
03EF:  MOVLW  20
03F0:  MOVWF  32
03F1:  CALL   221
....................       switch(haftanin_gunu) 
03F2:  MOVLW  01
03F3:  SUBWF  26,W
03F4:  ADDLW  F9
03F5:  BTFSC  03.0
03F6:  GOTO   44C
03F7:  ADDLW  07
03F8:  GOTO   4F0
....................       { 
....................       case 1: printf(lcd_putc,"P.TESI" );   break ; 
03F9:  CLRF   2C
03FA:  MOVF   2C,W
03FB:  CALL   00C
03FC:  INCF   2C,F
03FD:  MOVWF  77
03FE:  MOVWF  32
03FF:  CALL   221
0400:  MOVLW  06
0401:  SUBWF  2C,W
0402:  BTFSS  03.2
0403:  GOTO   3FA
0404:  GOTO   44C
....................       case 2: printf(lcd_putc,"SALI" );     break ; 
0405:  CLRF   2C
0406:  MOVF   2C,W
0407:  CALL   017
0408:  INCF   2C,F
0409:  MOVWF  77
040A:  MOVWF  32
040B:  CALL   221
040C:  MOVLW  04
040D:  SUBWF  2C,W
040E:  BTFSS  03.2
040F:  GOTO   406
0410:  GOTO   44C
....................       case 3: printf(lcd_putc,"CARSAMBA" ); break ; 
0411:  CLRF   2C
0412:  MOVF   2C,W
0413:  CALL   020
0414:  INCF   2C,F
0415:  MOVWF  77
0416:  MOVWF  32
0417:  CALL   221
0418:  MOVLW  08
0419:  SUBWF  2C,W
041A:  BTFSS  03.2
041B:  GOTO   412
041C:  GOTO   44C
....................       case 4: printf(lcd_putc,"PERSEMBE" ); break ; 
041D:  CLRF   2C
041E:  MOVF   2C,W
041F:  CALL   02D
0420:  INCF   2C,F
0421:  MOVWF  77
0422:  MOVWF  32
0423:  CALL   221
0424:  MOVLW  08
0425:  SUBWF  2C,W
0426:  BTFSS  03.2
0427:  GOTO   41E
0428:  GOTO   44C
....................       case 5: printf(lcd_putc,"CUMA" );     break ; 
0429:  CLRF   2C
042A:  MOVF   2C,W
042B:  CALL   03A
042C:  INCF   2C,F
042D:  MOVWF  77
042E:  MOVWF  32
042F:  CALL   221
0430:  MOVLW  04
0431:  SUBWF  2C,W
0432:  BTFSS  03.2
0433:  GOTO   42A
0434:  GOTO   44C
....................       case 6: printf(lcd_putc,"C.TESI" );   break ; 
0435:  CLRF   2C
0436:  MOVF   2C,W
0437:  CALL   043
0438:  INCF   2C,F
0439:  MOVWF  77
043A:  MOVWF  32
043B:  CALL   221
043C:  MOVLW  06
043D:  SUBWF  2C,W
043E:  BTFSS  03.2
043F:  GOTO   436
0440:  GOTO   44C
....................       case 7: printf(lcd_putc,"PAZAR" );    break ; 
0441:  CLRF   2C
0442:  MOVF   2C,W
0443:  CALL   04E
0444:  INCF   2C,F
0445:  MOVWF  77
0446:  MOVWF  32
0447:  CALL   221
0448:  MOVLW  05
0449:  SUBWF  2C,W
044A:  BTFSS  03.2
044B:  GOTO   442
....................       } 
....................       printf(lcd_putc, "\n%02d:%02d:%02d  "gun, ay, yil); 
044C:  MOVLW  0A
044D:  MOVWF  32
044E:  CALL   221
044F:  MOVF   23,W
0450:  MOVWF  2C
0451:  MOVLW  01
0452:  MOVWF  2D
0453:  CALL   25A
0454:  MOVLW  3A
0455:  MOVWF  32
0456:  CALL   221
0457:  MOVF   24,W
0458:  MOVWF  2C
0459:  MOVLW  01
045A:  MOVWF  2D
045B:  CALL   25A
045C:  MOVLW  3A
045D:  MOVWF  32
045E:  CALL   221
045F:  MOVF   25,W
0460:  MOVWF  2C
0461:  MOVLW  01
0462:  MOVWF  2D
0463:  CALL   25A
0464:  MOVLW  20
0465:  MOVWF  32
0466:  CALL   221
0467:  MOVLW  20
0468:  MOVWF  32
0469:  CALL   221
....................        
....................       
....................       // x in alinmasi 
....................       if(haber2 == 0) 
046A:  BTFSC  28.1
046B:  GOTO   4B0
....................       { 
....................          // bitkinin alinmasi 
....................          if(input(pin_B3) == 1) 
046C:  BTFSS  06.3
046D:  GOTO   473
....................          { 
....................             haber1 = 1; 
046E:  BSF    28.0
....................             delay_ms(50); 
046F:  MOVLW  32
0470:  MOVWF  33
0471:  CALL   06C
....................          } 
0472:  GOTO   47A
....................          else if(haber1 == 1) 
0473:  BTFSS  28.0
0474:  GOTO   47A
....................          { 
....................             x++; 
0475:  INCF   29,F
....................             haber1 = 0; 
0476:  BCF    28.0
....................             delay_ms(50); 
0477:  MOVLW  32
0478:  MOVWF  33
0479:  CALL   06C
....................          } 
....................          // x e göre bitki seçimi 
....................          if(x == 1) bitki = '1'; 
047A:  DECFSZ 29,W
047B:  GOTO   47F
047C:  MOVLW  31
047D:  MOVWF  27
047E:  GOTO   48C
....................          else if(x == 2) bitki = '2'; 
047F:  MOVF   29,W
0480:  SUBLW  02
0481:  BTFSS  03.2
0482:  GOTO   486
0483:  MOVLW  32
0484:  MOVWF  27
0485:  GOTO   48C
....................          else if(x == 3) bitki = '3'; 
0486:  MOVF   29,W
0487:  SUBLW  03
0488:  BTFSS  03.2
0489:  GOTO   48C
048A:  MOVLW  33
048B:  MOVWF  27
....................           
....................           
....................          // durumlarin alimasi 
....................          if(input(pin_a4) == 1) 
048C:  BTFSS  05.4
048D:  GOTO   493
....................          { 
....................             haber3 = 1; 
048E:  BSF    28.2
....................             delay_ms(50); 
048F:  MOVLW  32
0490:  MOVWF  33
0491:  CALL   06C
....................          } 
0492:  GOTO   49A
....................          else if(haber3 == 1) 
0493:  BTFSS  28.2
0494:  GOTO   49A
....................          { 
....................             y++; 
0495:  INCF   2A,F
....................             haber3 = 0; 
0496:  BCF    28.2
....................             delay_ms(50); 
0497:  MOVLW  32
0498:  MOVWF  33
0499:  CALL   06C
....................          } 
....................           
....................          // y  ye gore durum alin masi 
....................          if(y == 1)       
049A:  DECFSZ 2A,W
049B:  GOTO   49E
....................          { 
....................             durum1 = 1; 
049C:  BSF    28.3
....................          } 
049D:  GOTO   4AC
....................          else if(y == 2)  
049E:  MOVF   2A,W
049F:  SUBLW  02
04A0:  BTFSS  03.2
04A1:  GOTO   4A5
....................          { 
....................             durum1 = 1; 
04A2:  BSF    28.3
....................             durum2 = 1; 
04A3:  BSF    28.4
....................          } 
04A4:  GOTO   4AC
....................          else if(y == 3) 
04A5:  MOVF   2A,W
04A6:  SUBLW  03
04A7:  BTFSS  03.2
04A8:  GOTO   4AC
....................          { 
....................             durum1 = 1; 
04A9:  BSF    28.3
....................             durum2 = 1; 
04AA:  BSF    28.4
....................             durum3 = 1; 
04AB:  BSF    28.5
....................          } 
....................           
....................          if(saniye == 8)   haber2 = 1; 
04AC:  MOVF   20,W
04AD:  SUBLW  08
04AE:  BTFSC  03.2
04AF:  BSF    28.1
....................           
....................              
....................       } 
....................        
....................        
....................        
....................        
....................        
....................        
....................       // bitki degerine gore bitkinin yazýlmasý (sonsuz) 
....................       lcd_gotoxy(11,2); 
04B0:  MOVLW  0B
04B1:  MOVWF  33
04B2:  MOVLW  02
04B3:  MOVWF  34
04B4:  CALL   1FE
....................       if(bitki == '1')  printf(lcd_putc, "GUL"); 
04B5:  MOVF   27,W
04B6:  SUBLW  31
04B7:  BTFSS  03.2
04B8:  GOTO   4C2
04B9:  MOVLW  47
04BA:  MOVWF  32
04BB:  CALL   221
04BC:  MOVLW  55
04BD:  MOVWF  32
04BE:  CALL   221
04BF:  MOVLW  4C
04C0:  MOVWF  32
04C1:  CALL   221
....................        
....................       lcd_gotoxy(11,2); 
04C2:  MOVLW  0B
04C3:  MOVWF  33
04C4:  MOVLW  02
04C5:  MOVWF  34
04C6:  CALL   1FE
....................       if(bitki == '2')  printf(lcd_putc, "MARUL"); 
04C7:  MOVF   27,W
04C8:  SUBLW  32
04C9:  BTFSS  03.2
04CA:  GOTO   4D6
04CB:  CLRF   2C
04CC:  MOVF   2C,W
04CD:  CALL   058
04CE:  INCF   2C,F
04CF:  MOVWF  77
04D0:  MOVWF  32
04D1:  CALL   221
04D2:  MOVLW  05
04D3:  SUBWF  2C,W
04D4:  BTFSS  03.2
04D5:  GOTO   4CC
....................       
....................       if(bitki == '3')  printf(lcd_putc, "CILEK"); 
04D6:  MOVF   27,W
04D7:  SUBLW  33
04D8:  BTFSS  03.2
04D9:  GOTO   4E5
04DA:  CLRF   2C
04DB:  MOVF   2C,W
04DC:  CALL   062
04DD:  INCF   2C,F
04DE:  MOVWF  77
04DF:  MOVWF  32
04E0:  CALL   221
04E1:  MOVLW  05
04E2:  SUBWF  2C,W
04E3:  BTFSS  03.2
04E4:  GOTO   4DB
....................        
....................        
....................       delay_ms(300); 
04E5:  MOVLW  02
04E6:  MOVWF  2C
04E7:  MOVLW  96
04E8:  MOVWF  33
04E9:  CALL   06C
04EA:  DECFSZ 2C,F
04EB:  GOTO   4E7
04EC:  GOTO   2EC
....................    } 
....................    return 0; 
04ED:  MOVLW  00
04EE:  MOVWF  78
.................... } 
04EF:  SLEEP

Configuration Fuses:
   Word  1: 3F22   NOWDT PUT HS MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
